kafka.bootstrap.servers: localhost:29092
stretch-kafka:
  certificate-location: src/main/resources/globaltrust.jks
  username: user
  password: pass

kafka-config:
  stretch:
    "[sasl.jaas.config]": org.apache.kafka.common.security.scram.ScramLoginModule required username="${stretch-kafka.username}" password="${stretch-kafka.password}";
    "[sasl.mechanism]": SCRAM-SHA-512
    "[security.protocol]": SASL_SSL
    "[ssl.truststore.location]": ${stretch-kafka.certificate-location}
    "[ssl.truststore.password]": trendyolconfluentkeystorepassword
    "[default.api.timeout.ms]": 20000
    "[request.timeout.ms]": 20000
  producers:
    "[default]":
      props:
        "[bootstrap.servers]": ${kafka.bootstrap.servers}
        "[batch.size]": 16384
        "[linger.ms]": 5
        "[buffer.memory]": 33554432
        "[key.serializer]": org.apache.kafka.common.serialization.StringSerializer
        "[value.serializer]": org.springframework.kafka.support.serializer.JsonSerializer
        "[acks]": "1"
        "[request.timeout.ms]": 30000
  consumers:
    "[settlement-item-debezium-consumer]":
      topic: seller.settlement.int-settlement-debezium.settlement-cdc
      retry-topic: seller.finance.internationalcommissioninvoiceapi.settlementItems.0.retry
      error-topic: seller.finance.internationalcommissioninvoiceapi.settlementItems.0.error
      factory-bean-name: settlementItemDebeziumKafkaListenerContainerFactory
      concurrency: 1
      retry-count: 1
      sync-commit: true
      sync-commit-timeout-second: 5
      backoffIntervalMillis: 5000 #wait time for retry
      missingTopicAlertEnable: false
      failover-handler-bean-name: CommissionInvoiceCreateFailoverHandler
      props:
        "[bootstrap.servers]": ${kafka.bootstrap.servers}
        #"[spring.json.trusted.packages]": com.trendyol
        "[group.id]": seller.finance.internationalcommissioninvoiceapi.settlementItems.0.group
        "[max.poll.records]": 500 #for batch listener
        "[max.poll.interval.ms]": 300000 #poll time
        "[session.timeout.ms]": 10000
        "[heartbeat.interval.ms]": 3000
        "[enable.auto.commit]": true
        "[auto.offset.reset]": earliest
        "[fetch.max.bytes]": 52428800
        "[fetch.max.wait.ms]": 500
    "[commission-invoice-create-consumer]":
      topic: seller.finance.internationalcommissioninvoiceapi.commissionInvoiceCreate.0
      retry-topic: seller.finance.internationalcommissioninvoiceapi.commissionInvoiceCreate.0.retry
      error-topic: seller.finance.internationalcommissioninvoiceapi.commissionInvoiceCreate.0.error
      factory-bean-name: commissionInvoiceCreateKafkaListenerContainerFactory
      concurrency: 1
      retry-count: 0
      sync-commit: true
      sync-commit-timeout-second: 5
      backoffIntervalMillis: 5000 #wait time for retry
      missingTopicAlertEnable: false
      failover-handler-bean-name: CommissionInvoiceCreateFailoverHandler
      props:
        "[bootstrap.servers]": ${kafka.bootstrap.servers}
#        "[spring.json.trusted.packages]": com.trendyol.international.commission.invoice.api.domain.event
        "[group.id]": seller.finance.internationalcommissioninvoiceapi.commissionInvoiceCreate.0.group
        "[max.poll.records]": 500 #for batch listener
        "[max.poll.interval.ms]": 300000 #poll time
        "[session.timeout.ms]": 10000
        "[heartbeat.interval.ms]": 3000
        "[enable.auto.commit]": true
        "[auto.offset.reset]": earliest
        "[fetch.max.bytes]": 52428800
        "[fetch.max.wait.ms]": 500
  integration-topics:
    document-create-topic: seller.finance.internationalcommissioninvoiceapi.documentCreate.0
    commission-invoice-create-topic: seller.finance.internationalcommissioninvoiceapi.commissionInvoiceCreate.0
